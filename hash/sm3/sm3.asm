; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	c:\odzhan\tinycrypt\hash\sm3\sm3.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_SM3_Transform
; Function compile flags: /Ogspy
;	COMDAT _SM3_Transform
_TEXT	SEGMENT
_w2$ = -592						; size = 256
_w1$ = -336						; size = 272
tv716 = -64						; size = 4
tv710 = -60						; size = 4
tv725 = -56						; size = 4
tv713 = -52						; size = 4
tv722 = -48						; size = 4
tv707 = -44						; size = 4
tv719 = -40						; size = 4
_s2$ = -36						; size = 4
_s1$ = -32						; size = 4
_i$ = -28						; size = 4
_h$ = -24						; size = 4
_d$ = -20						; size = 4
_c$ = -16						; size = 4
_f$ = -12						; size = 4
_g$ = -8						; size = 4
_b$ = -4						; size = 4
tv239 = 8						; size = 4
_a$ = 8							; size = 4
_ctx$ = 8						; size = 4
_SM3_Transform PROC					; COMDAT
; File c:\odzhan\tinycrypt\hash\sm3\sm3.c
; Line 45
	push	ebp
	mov	ebp, esp
; Line 51
	mov	eax, DWORD PTR _ctx$[ebp]
	sub	esp, 592				; 00000250H
	push	ebx
	push	esi
	xor	edx, edx
	lea	ecx, DWORD PTR [eax+36]
	push	edi
$LL14@SM3_Transf:
; Line 52
	mov	esi, DWORD PTR [ecx]
	bswap	esi
	mov	DWORD PTR _w1$[ebp+edx*4], esi
	inc	edx
	add	ecx, 4
	cmp	edx, 16					; 00000010H
	jb	SHORT $LL14@SM3_Transf
; Line 56
	lea	ecx, DWORD PTR _w1$[ebp+52]
	mov	DWORD PTR tv239[ebp], 52		; 00000034H
$LL11@SM3_Transf:
; Line 61
	mov	edx, DWORD PTR [ecx-24]
	xor	edx, DWORD PTR [ecx-52]
	mov	esi, DWORD PTR [ecx]
	mov	edi, DWORD PTR [ecx-40]
	rol	esi, 15					; 0000000fH
	xor	edx, esi
	rol	edi, 7
	mov	ebx, edx
	rol	ebx, 15					; 0000000fH
	xor	edi, ebx
	ror	edx, 9
	xor	edi, edx
	xor	edi, DWORD PTR [ecx-12]
	add	ecx, 4
	xor	edi, DWORD PTR [ecx-28]
	xor	edi, DWORD PTR [ecx-56]
	xor	edi, esi
	dec	DWORD PTR tv239[ebp]
	mov	DWORD PTR [ecx+8], edi
	jne	SHORT $LL11@SM3_Transf
; Line 65
	xor	ecx, ecx
$LL8@SM3_Transf:
; Line 66
	mov	edx, DWORD PTR _w1$[ebp+ecx+16]
	xor	edx, DWORD PTR _w1$[ebp+ecx]
	add	ecx, 4
	mov	DWORD PTR _w2$[ebp+ecx-4], edx
	cmp	ecx, 256				; 00000100H
	jb	SHORT $LL8@SM3_Transf
; Line 71
	mov	ecx, DWORD PTR [eax+8]
	mov	edi, DWORD PTR [eax+4]
; Line 74
	mov	ebx, DWORD PTR [eax+20]
	mov	DWORD PTR _b$[ebp], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _c$[ebp], ecx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _d$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _f$[ebp], ecx
; Line 76
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _g$[ebp], ecx
; Line 77
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _h$[ebp], ecx
; Line 80
	xor	ecx, ecx
	mov	DWORD PTR _a$[ebp], edi
	mov	DWORD PTR _i$[ebp], ecx
$LL25@SM3_Transf:
; Line 82
	mov	edx, DWORD PTR _a$[ebp]
	rol	edx, 12					; 0000000cH
	cmp	ecx, 16					; 00000010H
	sbb	esi, esi
	and	esi, -12277873				; ff44a78fH
	add	esi, 2055708042				; 7a879d8aH
; Line 83
	rol	esi, cl
	add	esi, edx
	add	esi, ebx
	rol	esi, 7
; Line 84
	xor	edx, esi
	mov	DWORD PTR _s1$[ebp], esi
	mov	DWORD PTR _s2$[ebp], edx
; Line 85
	cmp	ecx, 16					; 00000010H
	jae	SHORT $LN2@SM3_Transf
; Line 86
	mov	esi, DWORD PTR _c$[ebp]
	xor	esi, DWORD PTR _b$[ebp]
	xor	esi, DWORD PTR _a$[ebp]
	add	esi, DWORD PTR _w2$[ebp+ecx*4]
	add	esi, edx
; Line 87
	mov	edx, DWORD PTR _g$[ebp]
	xor	edx, DWORD PTR _f$[ebp]
	xor	edx, ebx
; Line 88
	jmp	SHORT $LN26@SM3_Transf
$LN2@SM3_Transf:
; Line 89
	mov	esi, DWORD PTR _b$[ebp]
	xor	esi, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	and	edx, DWORD PTR _a$[ebp]
	and	esi, DWORD PTR _c$[ebp]
	xor	esi, edx
	add	esi, DWORD PTR _w2$[ebp+ecx*4]
; Line 90
	mov	ecx, DWORD PTR _f$[ebp]
	add	esi, DWORD PTR _s2$[ebp]
	mov	edx, ebx
	not	edx
	and	edx, DWORD PTR _g$[ebp]
	and	ecx, ebx
	xor	edx, ecx
	mov	ecx, DWORD PTR _i$[ebp]
$LN26@SM3_Transf:
	add	edx, DWORD PTR _w1$[ebp+ecx*4]
	add	esi, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _s1$[ebp]
; Line 92
	mov	ecx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _h$[ebp]
	mov	DWORD PTR _d$[ebp], ecx
; Line 93
	mov	ecx, DWORD PTR _b$[ebp]
	rol	ecx, 9
	mov	DWORD PTR _c$[ebp], ecx
; Line 94
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 96
	mov	ecx, DWORD PTR _g$[ebp]
	mov	DWORD PTR _h$[ebp], ecx
; Line 97
	mov	ecx, DWORD PTR _f$[ebp]
	ror	ecx, 13					; 0000000dH
	mov	DWORD PTR _g$[ebp], ecx
; Line 98
	mov	DWORD PTR _f$[ebp], ebx
; Line 99
	mov	ecx, edx
	ror	ecx, 15					; 0000000fH
	mov	ebx, edx
	rol	ebx, 9
	xor	ebx, ecx
	mov	ecx, DWORD PTR _i$[ebp]
	xor	ebx, edx
	inc	ecx
	mov	DWORD PTR _a$[ebp], esi
	mov	DWORD PTR _i$[ebp], ecx
	cmp	ecx, 64					; 00000040H
	jb	$LL25@SM3_Transf
; Line 102
	mov	ecx, DWORD PTR [eax+8]
	xor	ecx, DWORD PTR _b$[ebp]
	xor	edi, esi
	mov	DWORD PTR [eax+8], ecx
; Line 103
	mov	ecx, DWORD PTR [eax+12]
	xor	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax+12], ecx
; Line 104
	mov	ecx, DWORD PTR [eax+16]
	xor	ecx, DWORD PTR _d$[ebp]
	pop	edi
	mov	DWORD PTR [eax+16], ecx
; Line 105
	mov	ecx, DWORD PTR [eax+20]
	xor	ecx, ebx
	mov	DWORD PTR [eax+20], ecx
; Line 106
	mov	ecx, DWORD PTR [eax+24]
	xor	ecx, DWORD PTR _f$[ebp]
	pop	esi
	mov	DWORD PTR [eax+24], ecx
; Line 107
	mov	ecx, DWORD PTR [eax+28]
	xor	ecx, DWORD PTR _g$[ebp]
	pop	ebx
	mov	DWORD PTR [eax+28], ecx
; Line 108
	mov	ecx, DWORD PTR [eax+32]
	xor	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 109
	leave
	ret	0
_SM3_Transform ENDP
_TEXT	ENDS
PUBLIC	_SM3_Init
; Function compile flags: /Ogspy
;	COMDAT _SM3_Init
_TEXT	SEGMENT
_c$ = 8							; size = 4
_SM3_Init PROC						; COMDAT
; Line 117
	mov	eax, DWORD PTR _c$[esp-4]
; Line 125
	and	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 1937774191		; 7380166fH
	mov	DWORD PTR [eax+8], 1226093241		; 4914b2b9H
	mov	DWORD PTR [eax+12], 388252375		; 172442d7H
	mov	DWORD PTR [eax+16], -628488704		; da8a0600H
	mov	DWORD PTR [eax+20], -1452330820		; a96f30bcH
	mov	DWORD PTR [eax+24], 372324522		; 163138aaH
	mov	DWORD PTR [eax+28], -477237683		; e38dee4dH
	mov	DWORD PTR [eax+32], -1325724082		; b0fb0e4eH
; Line 126
	ret	0
_SM3_Init ENDP
_TEXT	ENDS
PUBLIC	_SM3_Update
; Function compile flags: /Ogspy
;	COMDAT _SM3_Update
_TEXT	SEGMENT
_p$ = -4						; size = 4
_c$ = 8							; size = 4
_r$ = 12						; size = 4
_in$ = 12						; size = 4
_len$ = 16						; size = 4
_SM3_Update PROC					; COMDAT
; Line 133
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 134
	mov	eax, DWORD PTR _in$[ebp]
; Line 141
	mov	edx, DWORD PTR _len$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [ebx]
	mov	DWORD PTR _p$[ebp], eax
	mov	eax, ecx
	add	ecx, edx
	and	eax, 63					; 0000003fH
	mov	DWORD PTR [ebx], ecx
; Line 143
	test	edx, edx
	je	SHORT $LN9@SM3_Update
	push	esi
	push	edi
$LL3@SM3_Update:
; Line 144
	mov	edx, DWORD PTR _len$[ebp]
	push	64					; 00000040H
	pop	ecx
	sub	ecx, eax
	mov	DWORD PTR _r$[ebp], edx
	cmp	edx, ecx
	jb	SHORT $LN7@SM3_Update
	mov	DWORD PTR _r$[ebp], ecx
$LN7@SM3_Update:
; Line 145
	mov	edx, DWORD PTR _r$[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	mov	ecx, edx
; Line 146
	add	edx, eax
	lea	edi, DWORD PTR [ebx+eax+36]
	rep movsb
	cmp	edx, 64					; 00000040H
	jb	SHORT $LN12@SM3_Update
; Line 148
	push	ebx
	call	_SM3_Transform
	pop	ecx
; Line 149
	mov	ecx, DWORD PTR _r$[ebp]
	sub	DWORD PTR _len$[ebp], ecx
; Line 151
	add	DWORD PTR _p$[ebp], ecx
	xor	eax, eax
	cmp	DWORD PTR _len$[ebp], eax
	jne	SHORT $LL3@SM3_Update
$LN12@SM3_Update:
	pop	edi
	pop	esi
$LN9@SM3_Update:
	pop	ebx
; Line 153
	leave
	ret	0
_SM3_Update ENDP
_TEXT	ENDS
PUBLIC	_SM3_Final
; Function compile flags: /Ogspy
;	COMDAT _SM3_Final
_TEXT	SEGMENT
_dgst$ = 8						; size = 4
_c$ = 12						; size = 4
_SM3_Final PROC						; COMDAT
; Line 161
	push	ebx
	push	esi
; Line 165
	mov	esi, DWORD PTR _c$[esp+4]
	mov	edx, DWORD PTR [esi]
	push	edi
	and	edx, 63					; 0000003fH
; Line 167
	push	64					; 00000040H
	lea	ebx, DWORD PTR [edx+esi+36]
	pop	ecx
	sub	ecx, edx
	xor	al, al
	mov	edi, ebx
	rep stosb
; Line 169
	mov	BYTE PTR [ebx], 128			; 00000080H
; Line 171
	cmp	edx, 56					; 00000038H
	jb	SHORT $LN4@SM3_Final
; Line 172
	push	esi
	call	_SM3_Transform
	pop	ecx
; Line 174
	push	64					; 00000040H
	lea	edi, DWORD PTR [esi+36]
	xor	al, al
	pop	ecx
	rep stosb
$LN4@SM3_Final:
; Line 177
	mov	eax, DWORD PTR [esi]
	xor	ecx, ecx
	shld	ecx, eax, 3
	shl	eax, 3
	bswap	eax
	bswap	ecx
; Line 179
	push	esi
	mov	DWORD PTR [esi+92], ecx
	mov	DWORD PTR [esi+96], eax
	call	_SM3_Transform
	pop	ecx
	add	esi, 4
	push	8
	mov	eax, esi
	pop	ecx
$LL3@SM3_Final:
; Line 183
	mov	edx, DWORD PTR [eax]
	bswap	edx
	mov	DWORD PTR [eax], edx
	add	eax, 4
	dec	ecx
	jne	SHORT $LL3@SM3_Final
; Line 186
	mov	edi, DWORD PTR _dgst$[esp+8]
	push	32					; 00000020H
	pop	ecx
	rep movsb
	pop	edi
	pop	esi
	pop	ebx
; Line 187
	ret	0
_SM3_Final ENDP
_TEXT	ENDS
END
